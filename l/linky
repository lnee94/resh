#bash-lib-o
id=("linky" "3.25" "daf0b0fc-3e86-475c-874d-17aac657dc1d" "https://raw.githubusercontent.com/lnee94/resh/main/l/linky" "4" ) # reeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
deps=("reline" "addlineend" )
defaltrepo="https://raw.githubusercontent.com/lnee94/resh/main/l"
###init-o
eval "$HOOK";RESHPACKAGES+=("$(set|grep ^id=);$(set|grep ^arg=)")
shopt -s expand_aliases
if [ "x$REPO" = "x" ];then REPO=$defaltrepo ;fi;depin="resher"
if [ "$(type -t resher)" != "function" ];then depinst(){ [ "$#" = "0" ] ||eval "arg=$2;""$(curl -s $REPO/$1)";};depin="depinst";fi
eval "$(echo ${deps[@]}|tr \  \\n |sed -e '/^$/d' | awk "{print \"$depin \"\$1}" )
$(set|grep "^id=");$(set|grep "^arg=") #;$(set|grep "^deps=" ) "
###init-c
###code-o

case $arg in

  help)
    echo "linky the swisarmy knife of geting links
usage: linky [OPTION]... URL

  -L fallos redirects
  --href handles partial links in hrefs 
  -S deletes backslashes
  -u converts unicode"
    ;;
    
  remove)
    unset linky
    unset getlinks
    unset headlink
    
    ;;

  *)
  
shopt -s expand_aliases
getlinks() {
PIPE="$(if [ -p /dev/stdin ]; then echo "$(</dev/stdin)"; fi)"
#prepair the input links
hesed="$(headlink "$1" | sed 's/\//\\\//g')"
ti1="$(sed <<<$1 's/\//\\\//g')"

 
if [ $ptxt = 1 ]
then

#finds pain text links
echo "$PIPE"  | grep -Eo "($portocall)://[a-z0-9:@.-]*($tld)/(:|)[a-zA-Z0-9./?=_:%&+-]*" 
fi

#handles href

if [ $href = 1 ]
then
 
pop="$(echo "$PIPE" | grep -Eo "href=\"[a-zA-Z0-9./?=_:%&+-]*\"" | awk -F\" '{print $2}' | addlineend | sed ':a;N;$!ba;s/\n\//\n#/g' | sed "s/#/$hesed\//g" )"
grep <<<"$pop" -Eo "($portocall)://[a-z0-9:@.-]*($tld)(:|)[a-zA-Z0-9./?=_:%&+-]*"

grep <<<"$pop" -Ev "($portocall)://[a-z0-9:@.-]*($tld)(:|)[a-zA-Z0-9./?=_:%&+-]*" | sed ':a;N;$!ba;s/\n/\n#/g' |sed "s/#/$ti1/g" 
fi
}
headlink(){
#gets just the domain
grep <<<"$1" -Eo "($portocall)://[a-z0-9:@.-]*($tld)"
}

linky(){
if [ "x$portocall" = "x" ]
then
portocall="http|https|ftp|git"
fi
if [ "xtld" = "x" ]
then
tld=".com|.ru|.org|.net|.ir|.in|.uk|.au|.ua|.de|.io|.ly|.be|.ls|.biz"
fi


#alias curl='curl -A "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/90.0.2"'






alias helpmsg="echo \"linky the swisarmy knife of geting links
usage: linky [OPTION]... URL

  -L fallos redirects
  --href handles partial links in hrefs 
  -S deletes backslashes
  -u converts unicode
\" ; return ; exit"

alias argggg='sed "s/\\\//g"'
alias arhhh='sed "s/u002F/\//g"'

#sets defallts
ptxt=1
href=0
gtx="curl -s"
reptnum=1
comdll="cat"
endco=cat


#the part where args are handle
flags=(  "-u" "-S" "-L" "-h" "--help" "--href" "*" )
flagdo=( 'comdll="$comdll"\|arhhh' 'comdll="$comdll"\|argggg ' "gtx=\"\$gtx -L\"" "helpmsg" "helpmsg" "href=1"  "argin=\$in")
flagcount=${#flags[@]}
    il=1
while [ $il != $(($# +1 )) ]
do
i=0
argnum=$il
out="case \$$argnum in"

while [ $i != $flagcount  ]
do

out="$out""
    ${flags[$i]})
    in=\$$argnum
    im=\$(echo \$in | tail -c \$(( \$(echo \$in | wc -c) - \$(echo ${flags[$i]} | wc -c) + 2)) )
    ${flagdo[$i]}
    ;;"


i=$(($i + 1 )) ;done
out="$out""
esac"

eval "$out"
il=$(($il + 1 )) ;done 



#entra setup

eval "modavar(){ "$comdll" ; }" # add modafication var that adds stuff
glx="$gtx"" $hlx"





$glx "$argin" 1> /dev/null ; if [ $? != 0 ] ; then echo "erorr coude not find $argin" >/dev/stderr ; return ; exit ; fi

#for when people don't wont to run this many times
$glx "$argin" | modavar | getlinks "$argin" | sort -u | reline

}

  ;;
  esac


###code-c
###exit-o
unset arg
###exit-c
###bash-lib-c